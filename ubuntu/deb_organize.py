"""
deb_organize.py

This script provides functionality to generate a manifest map from a project workspace.
It creates a mapping of project files based on a manifest file generated from the workspace.
The generated manifest map can be used to search for specific file paths within the project.
"""


import os
import sys
from color_logger import logger

from generate_project_info_from_manifest import create_project_info_file

def generate_manifest_map(WORKSPACE_DIR, OUT_FILE='manifest_map.txt'):
    """
    Generate a manifest map from the specified workspace directory.

    This function creates a project information file using the `create_project_info_file` function,
    reads the generated manifest file, and constructs a mapping of project files. The mapping is
    stored in a dictionary where the keys are file paths and the values are their corresponding
    project information.

    Args:
    -----
    - WORKSPACE_DIR (str): The directory of the workspace containing the project files.
    - OUT_FILE (str, optional): The name of the output file for the manifest map. Defaults to 'manifest_map.txt'.

    Returns:
    --------
    - dict: A dictionary mapping file paths to their corresponding project information.

    Raises:
    -------
    - FileNotFoundError: If the generated manifest file cannot be found or opened.
    """

    MANIFEST_MAP = {}

    out_file_path = os.path.join(WORKSPACE_DIR, OUT_FILE)

    create_project_info_file(WORKSPACE_DIR,
                            'le/product/manifest',
                            None,
                            out_file_path)

    with open(out_file_path, 'r') as file:
        for line in file:
            parts = line.strip().split('\t')
            MANIFEST_MAP[parts[0].strip()] = parts[1].strip()

    return MANIFEST_MAP

def search_manifest_map_for_path(MANIFEST_MAP, SOURCE_DIR, path):
    """
    Search for a specific path in the manifest map.

    This function checks if the provided path exists in the manifest map. If not, it attempts
    to find a matching key by checking if all parts of the key are present in the provided path.

    Args:
    -----
    - MANIFEST_MAP (dict): The manifest map generated by `generate_manifest_map`.
    - SOURCE_DIR (str): The source directory to be used for path normalization.
    - path (str): The path to search for in the manifest map.

    Returns:
    --------
    - str or oss: The corresponding value from the manifest map if found, otherwise None.
    """
    if path:
        path = str(path).strip().replace(SOURCE_DIR, 'sources')
        if path in MANIFEST_MAP:
            return MANIFEST_MAP[path]
        else:
            path_parts = path.split('/')
            num_parts = len(path_parts)
            for key in MANIFEST_MAP.keys():
                key_parts = key.split('/')
                if all(part in path_parts for part in key_parts):
                    return MANIFEST_MAP[key]
    return "oss"
