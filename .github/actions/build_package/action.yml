name: Build Debian Package
description: |
  This Github Actions builds the package

inputs:
  pkg-dir:
    description: The directory where the debian package source is
    required: true
  build-dir:
    description: The directory where the package is built
    required: true
  run-lintian:
    description: Run lintian or not during the build
    default: false

runs:
  using: "composite"
  
  steps:

    - name: Prepare Workspace Structure For The Build
      shell: bash
      run: |
        echo "Listing the content of the workspace :"; tree

        mkdir ${{inputs.build-dir}}

        if grep -q 'quilt' ./package-repo/debian/source/format; then
          echo "Source format is quilt"
        elif grep -q 'native' ./package-repo/debian/source/format; then
          echo "Source format is native"
        else
          echo "Source format is unknown or unsupported"
          exit 1
        fi

    - name : Build Package
      shell: bash
      run: |
        cd ${{inputs.pkg-dir}}

        if [[ "${{inputs.run-lintian}}" == "true" ]]; then
          lintian_flag="--run-lintian"
        else
          lintian_flag="--no-run-lintian"
        fi

        if curl -sfI "http://pkg.qualcomm.com/dists/${{env.UBUNTU_DISTRIBUTION}}/Release" > /dev/null; then
          EXTRA_REPO="--extra-repository='deb [arch=${{env.HOST_ARCH}} trusted=yes] http://pkg.qualcomm.com ${{env.UBUNTU_DISTRIBUTION}}/stable main'"
        else
          EXTRA_REPO=""
        fi

        set +e

        # ℹ️ --git-ignore-branch is necessary because the debian branch actually checked out can be any (ex, debian/1.0.0) because we can build any previous tag 
        # ℹ️ chroot mode unshare is important to bypass privilege issues with the mounting
        gbp buildpackage \
          --git-ignore-branch \
          --git-builder="sbuild --host=${{env.HOST_ARCH}} \
                                --build=${{env.BUILD_ARCH}} \
                                --dist=${{env.UBUNTU_DISTRUBUTION}} \
                                $lintian_flag \
                                --build-dir ../${{inputs.build-dir}} \
                                --build-dep-resolver=apt \
                                $EXTRA_REPO"

        RET=$?

        if (( RET == 0 )); then
          echo "✅ Successfully built package"
        else
          BUILD_LOG=$(find ../${{inputs.build-dir}} -maxdepth 1 -name "*.build" ! -type l)

          if [[ -n "$BUILD_LOG" ]]; then
            tail -n 500 "$BUILD_LOG"
            echo "❌ Build failed, printed the last 500 lines of the build log file"
          else
            echo "❌ Build failed, but no .build log file was found to print"
          fi

          exit 1
        fi
